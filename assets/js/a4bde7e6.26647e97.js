"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3951],{3905:function(t,e,r){r.d(e,{Zo:function(){return s},kt:function(){return u}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var d=n.createContext({}),p=function(t){var e=n.useContext(d),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},s=function(t){var e=p(t.components);return n.createElement(d.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,d=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),c=p(r),u=a,k=c["".concat(d,".").concat(u)]||c[u]||m[u]||o;return r?n.createElement(k,i(i({ref:e},s),{},{components:r})):n.createElement(k,i({ref:e},s))}));function u(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},6314:function(t,e,r){r.r(e),r.d(e,{default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={title:"error",description:"Specification of the error.rs module",keywords:["development","developers","lido","specification","intent","error","solido","solana"],sidebar_position:6},d={unversionedId:"development/specification/solido/error",id:"development/specification/solido/error",isDocsHomePage:!1,title:"Error",description:"Specification of the error.rs module",source:"@site/docs/development/specification/solido/error.md",sourceDirName:"development/specification/solido",slug:"/development/specification/solido/error",permalink:"/development/specification/solido/error",version:"current",sidebarPosition:6,frontMatter:{title:"error",description:"Specification of the error.rs module",keywords:["development","developers","lido","specification","intent","error","solido","solana"],sidebar_position:6},sidebar:"solidoSidebar",previous:{title:"Entrypoint",permalink:"/development/specification/solido/entrypoint"},next:{title:"Instruction",permalink:"/development/specification/solido/instruction"}},p=[{value:"Errors",id:"errors",children:[]}],s={toc:p};function m(t){var e=t.components,r=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The error module defines the LidoError enum for the available error types in the Solido  program along with some small conversion implementations to and from the Solana ProgramError struct."),(0,o.kt)("h2",{id:"errors"},"Errors"),(0,o.kt)("p",null,"The LidoError enum, at time of writing, defines the following errors:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Error"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"AlreadyInUse")),(0,o.kt)("td",{parentName:"tr",align:null},"The Lido address passed to the program is in use; i.e. the Solido program has already been initialised.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidOwner")),(0,o.kt)("td",{parentName:"tr",align:null},"The address of the owner of the Solido program is different to the passed program id.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidAmount")),(0,o.kt)("td",{parentName:"tr",align:null},"The amount being staked is below the minimum stake amount.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"SignatureMissing")),(0,o.kt)("td",{parentName:"tr",align:null},"A required signature is missing")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidReserveAuthority")),(0,o.kt)("td",{parentName:"tr",align:null},"The authority for the reserve account, where SOL gets deposited, is invalid")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"CalculationFailure")),(0,o.kt)("td",{parentName:"tr",align:null},"Calculation failed due to division by zero or overflow")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"WrongStakeState")),(0,o.kt)("td",{parentName:"tr",align:null},"Stake account is in an invalid state or does not exist when processing a stake deposit")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"MaximumNumberOfAccountsExceeded")),(0,o.kt)("td",{parentName:"tr",align:null},"The maximum number of entries in the account map is already at maximum capacity as defined by maximum entries")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"UnexpectedMaxValidators")),(0,o.kt)("td",{parentName:"tr",align:null},"The size of the account for the Solido state does not match ",(0,o.kt)("inlineCode",{parentName:"td"},"max_validators"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidManager")),(0,o.kt)("td",{parentName:"tr",align:null},"Wrong manager trying  to alter the state of the Solido program")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidMaintainer")),(0,o.kt)("td",{parentName:"tr",align:null},"Wrong maintainer trying  to alter the state of the Solido program")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidAccountInfo")),(0,o.kt)("td",{parentName:"tr",align:null},"The provided account is mismatched in is_writable or is_signer to what was expected for that type of account")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"TooManyAccountKeys")),(0,o.kt)("td",{parentName:"tr",align:null},"More accounts were provided than Solido expects")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidValidatorCreditAccount")),(0,o.kt)("td",{parentName:"tr",align:null},"The account provided when claiming validator fees is incorrect")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidFeeRecipient")),(0,o.kt)("td",{parentName:"tr",align:null},"The provided fee recipient account is incorrect")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"DuplicatedEntry")),(0,o.kt)("td",{parentName:"tr",align:null},"The entry trying to be added to the account_map already exists")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"ValidatorHasUnclaimedCredit")),(0,o.kt)("td",{parentName:"tr",align:null},"The validator trying to be removed has unclaimed credit, the credit should be minted before the validator is removed")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"ReserveIsNotRentExempt")),(0,o.kt)("td",{parentName:"tr",align:null},"The reserve account value is not above the minimum value for rent exemption")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"AmountExceedsReserve")),(0,o.kt)("td",{parentName:"tr",align:null},"The requested amount for reserve withdrawal exceeds the maximum held in the reserve account when considering rent exemption")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidAccountMember")),(0,o.kt)("td",{parentName:"tr",align:null},"An entry in the account map is not present")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidLidoSize")),(0,o.kt)("td",{parentName:"tr",align:null},"Lido has an invalid size, calculated with the Lido's constant size plus  required to hold variable structures")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"NoActiveValidators")),(0,o.kt)("td",{parentName:"tr",align:null},"There are no validators with an active stake account to delegate to")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidStakeAccount")),(0,o.kt)("td",{parentName:"tr",align:null},"When staking part of the reserve to a new stake account, the next program-derived address for the stake account associated with the given validator, does not match the provided stake account")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"InvalidStSolAccount")),(0,o.kt)("td",{parentName:"tr",align:null},"We expected an SPL token account that holds stSOL, but this was not an SPL token account, or its mint did not match")))))}m.isMDXComponent=!0}}]);