(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5267],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=i,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6276:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var a=t(2122),i=t(9756),o=(t(7294),t(3905)),r={},l={unversionedId:"operation/the-solido-utility",id:"operation/the-solido-utility",isDocsHomePage:!1,title:"The Solido utility",description:"Lido for Solana consists of an on-chain program, a web-based frontend for users",source:"@site/docs/operation/the-solido-utility.md",sourceDirName:"operation",slug:"/operation/the-solido-utility",permalink:"/operation/the-solido-utility",version:"current",frontMatter:{},sidebar:"solidoSidebar",previous:{title:"Validator onboarding",permalink:"/validator-onboarding"},next:{title:"Maintenance",permalink:"/operation/maintenance"}},s=[{value:"Obtaining Solido",id:"obtaining-solido",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Using a hardware wallet",id:"using-a-hardware-wallet",children:[]}],p={toc:s};function d(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Lido for Solana consists of an on-chain program, a web-based frontend for users\nto interact with it, and a command-line client for administration and\nmaintenance interact with it. This command-line client is called ",(0,o.kt)("inlineCode",{parentName:"p"},"solido"),". It\nis used for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Creating a new Solido instance. This is only done once on mainnet, but we do\nit often on a local validator for testing."),(0,o.kt)("li",{parentName:"ul"},"Creating a new multisig instance, and approving and executing multisig\ntransactions."),(0,o.kt)("li",{parentName:"ul"},"Creating multisig transactions for administration operations (adding\nvalidators, changing the fees)."),(0,o.kt)("li",{parentName:"ul"},"Running ",(0,o.kt)("a",{parentName:"li",href:"/operation/maintenance"},"the maintenance daemon"),"."),(0,o.kt)("li",{parentName:"ul"},"Inspecting a Solido instance, to show the current status."),(0,o.kt)("li",{parentName:"ul"},"Making deposits and withdrawals. These are indended for testing, end\nusers are expected to use the webinterface instead.")),(0,o.kt)("h2",{id:"obtaining-solido"},"Obtaining Solido"),(0,o.kt)("p",null,"You can either build ",(0,o.kt)("inlineCode",{parentName:"p"},"solido")," from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ChorusOne/solido"},"source")," with Cargo, or use the\n",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/chorusone/solido-maintainer"},(0,o.kt)("inlineCode",{parentName:"a"},"chorusone/solido-maintainer"))," container image that includes a\nprebuilt version. The utility is developed and tested on Linux, and it should\nrun on Mac as well. When building from source, make sure to clone the repository\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"--recurse-submodules"),"."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"solido")," program needs to know a few things before it can interact with the\non-chain program:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The network to connect to (mainnet-beta, testnet, or possibly a local test\nvalidator)."),(0,o.kt)("li",{parentName:"ul"},"The address of the Solido program, and the address of the Solido instance."),(0,o.kt)("li",{parentName:"ul"},"Possibly the address of the multisig program, and the address of the multisig\ninstance."),(0,o.kt)("li",{parentName:"ul"},"When signing, the key pair to sign with.")),(0,o.kt)("p",null,"These can be configured in three ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With command-line arguments. See ",(0,o.kt)("inlineCode",{parentName:"p"},"solido --help")," for more details.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With environment variables. The names are the same as the command-line\noptions, but uppercase, with underscores instead of dashes, and prefixed with\n",(0,o.kt)("inlineCode",{parentName:"p"},"SOLIDO_"),". For example, to provide ",(0,o.kt)("inlineCode",{parentName:"p"},"--keypair-path")," through an environment\nvariable, set ",(0,o.kt)("inlineCode",{parentName:"p"},"SOLIDO_KEYPAIR_PATH"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With a json configuration file, that contains an object with options. The\nnames are the same as the command-line options, but with underscores instead\nof dashes. For example, to set ",(0,o.kt)("inlineCode",{parentName:"p"},"--keypair-path")," in a config file, write the\nfollowing to ",(0,o.kt)("inlineCode",{parentName:"p"},"solido.json"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "keypair_path": "/home/users/lido/.config/solana/id.json"\n}\n')),(0,o.kt)("p",{parentName:"li"},"Then run ",(0,o.kt)("inlineCode",{parentName:"p"},"solido")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"--config solido.json")," to use this config file."))),(0,o.kt)("p",null,"When an option is provided in multiple places, the command-line takes\nprecedence, then the config file, then the environment variable, and if that is\nnot set either, the default value is used, if possible."),(0,o.kt)("p",null,"For sample configuration files with the right addresses set up, see\n",(0,o.kt)("a",{parentName:"p",href:"/deployments"},"the deployments page"),"."),(0,o.kt)("h2",{id:"using-a-hardware-wallet"},"Using a hardware wallet"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"--keypair-path")," can point to a keypair file generated with ",(0,o.kt)("inlineCode",{parentName:"p"},"solana-keygen"),",\nor it can be a URI that starts with ",(0,o.kt)("inlineCode",{parentName:"p"},"usb://")," to use a hardware wallet. Some\nexamples:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"usb://ledger")," to connect to a Ledger and use its default key."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"usb://ledger?key=0")," to select the key by derivation path.")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://docs.solana.com/wallet-guide/hardware-wallets"},"the Solana documentation on hardware wallets")," for more\ninformation."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"When using a Ledger hardware wallet, you need to turn on the ",(0,o.kt)("em",{parentName:"strong"},"blind signing"),"\nsetting in the Solana app on the device.")," By default, Ledger tries to parse all\ntransactions that it signs, so it can show a summary of the transaction on\nits display. However, Ledger does not have a parser for Solido transactions or\nmultisig transactions, so by default it refuses to sign those. By enabling\n",(0,o.kt)("em",{parentName:"p"},"blind signing"),", you allow the Ledger to sign transactions that it cannot show a\nsummary for. The Ledger still requires human confirmation to sign, even when\nblind signing is enabled."))}d.isMDXComponent=!0}}]);