@startuml SoLido program
allow_mixing

skinparam class {
  BackgroundColor<<On-Chain>> Wheat
  BorderColor<<On-Chain>> Tomato
  BackgroundColor<<Client>> aliceblue
  BorderColor<<On-Client>> aliceblue
}

skinparam stereotypeCBackgroundColor<< On-Chain >> DimGray

class Anker <<On-Chain>> {
  # version: <font color="grey"> u8
  + solido_program_id: <font color="grey">Pubkey
  + solido: <font color="grey">Pubkey
  + b_sol_mint: <font color="grey">Pubkey
  + token_swap_pool: <font color="grey">Pubkey
  + terra_rewards_destination: <font color="grey">Pubkey
  + wormhole_parameters: <font color="grey">WormholeParameters
  + sell_rewards_min_out_bps: <font color="grey">u64
  + metrics: <font color="grey">Metrics
  + historical_st_sol_prices: <font color="grey">[HistoricalStSolPrice; 5]
  # self_bump_seed: <font color="grey">u8
  # mint_authority_bump_seed: <font color="grey">u8
  # reserve_authority_bump_seed: <font color="grey">u8
  # st_sol_reserve_account_bump_seed: <font color="grey">u8
  # ust_reserve_account_bump_seed: <font color="grey">u8
}

package "-" {

  class WormholeParameters {
    +core_bridge_program_id: <font color="grey">Pubkey
    +token_bridge_program_id: <font color="grey">Pubkey
  }

  class Metrics {
    +swapped_rewards_st_sol_total: <font color="grey">StLamports(u64)
    +swapped_rewards_ust_total: <font color="grey">MicroUst(u64)
  }

  class HistoricalStSolPrice {
    +slot:  <font color="grey">Slot(u64)
    +st_sol_price_in_ust:  <font color="grey">MicroUst(u64)
  }

  Anker::wormhole_parameters .. WormholeParameters
  Anker::metrics .. Metrics
  Anker::historical_st_sol_prices .. HistoricalStSolPrice
}

package "Initialize" {
  InitializeAccountsInfo --> Anker : Initialize data

  class InitializeAccountsInfo <<Client>> {
    +fund_rent_from: <font color="grey">AccountInfo
    +anker: <font color="grey">AccountInfo
    +solido: <font color="grey">AccountInfo
    +solido_program: <font color="grey">AccountInfo
    +wormhole_core_bridge_program_id: <font color="grey">AccountInfo
    +wormhole_token_bridge_program_id: <font color="grey">AccountInfo
    +st_sol_mint: <font color="grey">AccountInfo
    +b_sol_mint: <font color="grey">AccountInfo
    +st_sol_reserve_account: <font color="grey">AccountInfo
    +ust_reserve_account: <font color="grey">AccountInfo
    +reserve_authority: <font color="grey">AccountInfo
    +token_swap_pool: <font color="grey">AccountInfo
    +ust_mint: <font color="grey">AccountInfo
    +sysvar_rent: <font color="grey">AccountInfo
    +system_program: <font color="grey">AccountInfo
    +spl_token: <font color="grey">AccountInfo
    }

  class fund_rent_from {}

  InitializeAccountsInfo::fund_rent_from .. fund_rent_from
  fund_rent_from -up-> InitializeAccountsInfo::anker : [1] Create an account \nfor the Anker instance
  fund_rent_from -up-> InitializeAccountsInfo::st_sol_reserve_account : [2] Create and initialize an \nstSOL SPL token account \nfor the reserve
  fund_rent_from -up-> InitializeAccountsInfo::ust_reserve_account : [3] Create and initialize an \nUST SPL token account for\n the reserve
}


package Deposit {
  class DepositAccountsInfo {
    +anker: <font color="grey">AccountInfo
    +solido: <font color="grey">AccountInfo
    +from_account: <font color="grey">AccountInfo
    +user_authority: <font color="grey">AccountInfo
    +to_reserve_account: <font color="grey">AccountInfo
    +b_sol_user_account: <font color="grey">AccountInfo
    +b_sol_mint: <font color="grey">AccountInfo
    +b_sol_mint_authority: <font color="grey">AccountInfo
    +spl_token: <font color="grey">AccountInfo
    +{method} amount: <font color="grey">StLamports(u32)
  }
  note left : Deposit an amount of StLamports\n and get bSol in return

  class from_account {}
  class b_sol_user_account {}

  DepositAccountsInfo::from_account .. from_account
  DepositAccountsInfo::b_sol_user_account .. b_sol_user_account
  from_account -up-> DepositAccountsInfo::to_reserve_account : [1] Transfer `amount` StLamports\n to the reserve.
  DepositAccountsInfo::b_sol_mint -up-> b_sol_user_account : [2] Mint the given amount of\n bSOL to user account
}

package FetchPoolPrice {
  class FetchPoolPriceAccountsInfo {
    +anker: <font color="grey">AccountInfo
    +solido: <font color="grey">AccountInfo
    +token_swap_pool: <font color="grey">AccountInfo
    +pool_st_sol_account: <font color="grey">AccountInfo
    +pool_ust_account: <font color="grey">AccountInfo
    #sysvar_clock: <font color="grey">AccountInfo
  }
  note top: Sample the current pool price,\n used later to limit slippage in `SellRewards`

  FetchPoolPriceAccountsInfo::pool_st_sol_account --> Anker::historical_st_sol_prices : [1] Get the price for selling \n1 stSOL in MicroUst in the token\n swap pool and update the history
}

package SellRewards {
  class SellRewardsAccountsInfo {
    +anker: <font color="grey">AccountInfo
    +solido: <font color="grey">AccountInfo
    +st_sol_reserve_account: <font color="grey">AccountInfo
    +b_sol_mint: <font color="grey">AccountInfo
    +token_swap_pool: <font color="grey">AccountInfo
    +pool_st_sol_account: <font color="grey">AccountInfo
    +pool_ust_account: <font color="grey">AccountInfo
    +ust_reserve_account: <font color="grey">AccountInfo
    +pool_mint: <font color="grey">AccountInfo
    +st_sol_mint: <font color="grey">AccountInfo
    +ust_mint: <font color="grey">AccountInfo
    +pool_fee_account: <font color="grey">AccountInfo
    #token_swap_authority: <font color="grey">AccountInfo
    #reserve_authority: <font color="grey">AccountInfo
    #token_swap_program_id: <font color="grey">AccountInfo
    #spl_token:  <font color="grey">AccountInfo
    #sysvar_clock: <font color="grey">AccountInfo
  }
  note right: Exchange Anker rewards from \nStSOL to UST using Orca

  class st_sol_reserve_account {}

  SellRewardsAccountsInfo::st_sol_reserve_account .. st_sol_reserve_account
  st_sol_reserve_account -up-> SellRewardsAccountsInfo::ust_reserve_account : [1] Swap the rewards from StSOL \nto UST and send to \nust_reserve_account
  st_sol_reserve_account --> Anker::metrics : [2] Update swapped \nrewards metrics
}

package Withdraw {
  class WithdrawAccountsInfo {
    +anker: <font color="grey">AccountInfo
    +solido: <font color="grey">AccountInfo
    +from_b_sol_account: <font color="grey">AccountInfo
    +from_b_sol_authority: <font color="grey">AccountInfo
    +to_st_sol_account: <font color="grey">AccountInfo
    +reserve_account: <font color="grey">AccountInfo
    #reserve_authority: <font color="grey">AccountInfo
    +b_sol_mint: <font color="grey">AccountInfo
    #spl_token: <font color="grey">AccountInfo
    +{method} amount: <font color="grey">BLamports(u64)
  }

  class reserve_account {}
  class from_b_sol_account {
    [2] Burn given `amount` of bSOL
  }

  reserve_account .. WithdrawAccountsInfo::reserve_account
  from_b_sol_account .. WithdrawAccountsInfo::from_b_sol_account
  reserve_account -up-> WithdrawAccountsInfo::to_st_sol_account : [1] Transfer the stSOL\n back to the user
}

package SendRewards {
  class SendRewardsAccountsInfo {
    +anker: <font color="grey">AccountInfo
    +solido: <font color="grey">AccountInfo
    +reserve_authority: <font color="grey">AccountInfo
    #wormhole_token_bridge_program_id: <font color="grey">AccountInfo
    #wormhole_core_bridge_program_id: <font color="grey">AccountInfo
    +payer: <font color="grey">AccountInfo
    #config_key: <font color="grey">AccountInfo
    +ust_reserve_account: <font color="grey">AccountInfo
    +ust_mint: <font color="grey">AccountInfo
    #wrapped_meta_key: <font color="grey">AccountInfo
    #authority_signer_key: <font color="grey">AccountInfo
    #bridge_config: <font color="grey">AccountInfo
    #message: <font color="grey">AccountInfo
    #emitter_key: <font color="grey">AccountInfo
    #sequence_key: <font color="grey">AccountInfo
    #fee_collector_key: <font color="grey">AccountInfo
    #sysvar_clock: <font color="grey">AccountInfo
    #sysvar_rent: <font color="grey">AccountInfo
    #system_program: <font color="grey">AccountInfo
    #spl_token: <font color="grey">AccountInfo
  }
  note top: Send rewards via Wormhole from\n the UST reserve address to Terra

  class ust_reserve_account {}

  ust_reserve_account .. SendRewardsAccountsInfo::ust_reserve_account
  ust_reserve_account --> SendRewardsAccountsInfo::authority_signer_key : [1] Approve Wormhole authority to \nsign the SPL token transfer \nout of the reserve account
  ust_reserve_account --> SendRewardsAccountsInfo::bridge_config : [2] Send UST tokens \nvia Wormhole
}

@enduml
